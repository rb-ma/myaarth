$(document).ready(function () { Autocomplete.init($("#searchTextBox")); $("body").on("click", ".removeStock", function () { var a = $(this).closest("tr").attr("data-tracker-index") - 0; TickerTracker.removeSymbol(a) }); $("body").on("keyup blur change", ".stockValue", function () { var a = $(this).closest("tr").attr("data-tracker-index") - 0, b = $(this).val(); TickerTracker.updateSymbolOwnership(a, b) }); $("body").on("click", ".toggleVal", function () { var a = $(this).html(), b = $(this).attr("data-alt-value"); $(this).closest("tr").attr("data-tracker-index"); $(".toggleVal").html(b); $(".toggleVal").attr("data-alt-value", a); TickerTracker.currentPortfolioType = b; TickerTracker.updateAllSymbolOwnershipType(b); "%" == b ? ($("#totalAmountInput").removeClass("disabled").removeAttr("disabled").val(""), TickerTracker.toggleAmountsToPercentages()) : ($("#totalAmountInput").addClass("disabled").attr("disabled", "disabled"), TickerTracker.updateTotalValue(), TickerTracker.togglePercentagesToAmounts()); TickerTracker.showTotalEmphasis() }); $("#finishButton").on("click", function () { parseInt(TickerTracker.totalValue, 10); "%" == TickerTracker.currentPortfolioType && (isNaN(TickerTracker.currentPercentageOwnershipValue) || 0 >= TickerTracker.currentPercentageOwnershipValue ? $("#confirmTotalOwnershipEmpty").modal("show") : $("#confirmModal").modal("show")); "$" == TickerTracker.currentPortfolioType && (isNaN(TickerTracker.totalValue) || 0 >= TickerTracker.totalValue ? $("#confirmTotalOwnershipEmpty").modal("show") : $("#confirmModal").modal("show")) }); $("#searchTextBox").on("blur", function () { "" == $(this).val() && ($(this).val($(this).attr("data-default-value")), $(this).css({ fontStyle: "italic" })) }); $("#searchTextBox").on("focus", function () { $(this).val() == $(this).attr("data-default-value") && ($(this).val(""), $(this).css({ fontStyle: "normal" })) }); $("#manualAddButton").on("click", function () { var a = $("#searchTextBox").val(); TickerTracker.addManualSymbol(a) }); $("#closeConfirm").on("click", function () { $("#confirmModal").modal("hide") }); $("#confirmEmpty").on("click", function () { $("#confirmTotalOwnershipEmpty").modal("hide"); $("#confirmModal").modal("show") }); $("#savePortfolio").on("click", function () { $("#confirmModal").modal("hide"); Database.insertNewStocks() }); $("#cancelInconsistency").on("click", function () { $("#portfolioInconsistent").modal("hide") }); $("#proceedWithInconsistency").on("click", function () { $("#portfolioInconsistent").modal("hide"); TickerTracker.allowInconsistency = !0; Database.insertNewStocks() }); $("#confirmModal, #showSaved, #portfolioInconsistent, #confirmTotalOwnershipEmpty").modal({ backdrop: !0, show: !1, keyboard: !0 }); $("#closeSaved").on("click", function () { $("#showSaved").modal("hide") }); $("#resetPortfolioButton").on("click", function () { confirm("Are you sure you'd like to reset your portfolio? Doing so will remove all portfolio history.") && Database.resetPortfolio() }); $("body").on("mouseover", ".autocompleteSuggestion", function () { $(this).addClass("alert-message warning small").css({ padding: "0" }) }); $("body").on("mouseout", ".autocompleteSuggestion", function () { $(this).removeClass("alert-message warning small") }); $("body").on("keyup change", "#totalAmountInput", function () { TickerTracker.currentPercentageOwnershipValue = parseFloat($(this).val()) }) }); SymbolCache = { addSymbolToCache: function (a, b, c) { SymbolCache.Cache.push({ symbol_id: a, symbol_name: b, symbol_description: c }) }, Cache: [] }; TickerTracker = { userTrackingSymbols: [], totalValue: 0, currentPercentageOwnershipValue: 0, lastPortfolioType: null, currentPortfolioType: null, allowInconsistency: !1, noTotalValue: !1, addSymbol: function (a) { TickerTracker.appendSymbol(a); $("#searchTextBox").val("").trigger("blur"); TickerTracker.drawTable() }, toggleAmountsToPercentages: function () { var a = TickerTracker.totalValue / 100; $.each(TickerTracker.userTrackingSymbols, function (b, c) { c.ownership_value /= a; c.ownership_value = c.ownership_value.toFixed(2); c.ownership_type = "%" }); TickerTracker.drawTable() }, togglePercentagesToAmounts: function () { var a = TickerTracker.currentPercentageOwnershipValue / 100; $.each(TickerTracker.userTrackingSymbols, function (b, c) { c.ownership_value *= a; c.ownership_value = c.ownership_value.toFixed(2); c.ownership_type = "$" }); TickerTracker.drawTable() }, removeSymbol: function (a) { TickerTracker.userTrackingSymbols.remove(a, a); TickerTracker.drawTable(); "%" != TickerTracker.currentPortfolioType && TickerTracker.updateTotalValue() }, addManualSymbol: function (a) { $.each(SymbolCache.Cache, function (b, c) { if (c.symbol_name.toLowerCase().trim() == a.toLowerCase().trim()) return TickerTracker.addSymbol(c.symbol_id), Autocomplete.hideSuggestions(), !1 }) }, updateTotalValue: function () { TickerTracker.totalValue = 0; $.each(TickerTracker.userTrackingSymbols, function (a, b) { TickerTracker.totalValue += b.ownership_value - 0 }); isNaN(TickerTracker.totalValue) ? $("#totalAmountInput").val("-") : $("#totalAmountInput").val(TickerTracker.totalValue.toFixed(2)) }, updateSymbolOwnership: function (a, b) { if (!isNaN(b)) { var c = jQuery.extend({}, TickerTracker.userTrackingSymbols[a]); c.ownership_value = b; TickerTracker.userTrackingSymbols[a] = c; "$" == TickerTracker.currentPortfolioType && TickerTracker.updateTotalValue() } }, updateSymbolOwnershipType: function (a, b) { var c = TickerTracker.userTrackingSymbols[a]; c.ownership_type = b; TickerTracker.userTrackingSymbols[a] = c }, updateAllSymbolOwnershipType: function (a) { $.each(TickerTracker.userTrackingSymbols, function (b, c) { c.ownership_type = a }) }, _symbol: function () { this.ownership_value = this.symbol_description = this.symbol_name = this.symbol_id = null; this.ownership_type = "$" }, appendSymbol: function (a) { $.each(SymbolCache.Cache, function (b, c) { if (a === c.symbol_id) { var d = new TickerTracker._symbol; d.symbol_id = c.symbol_id; d.symbol_name = c.symbol_name; d.symbol_description = c.symbol_description; d.ownership_type = TickerTracker.currentPortfolioType; TickerTracker.userTrackingSymbols.push(d); return !1 } }) }, drawTable: function () { var a = ["<table><thead><tr><th>Ticker</th><th>Company / Mutual Fund Name</th><th>Amount (as of date)</th><th></th></tr></thead><tbody>"]; $.each(TickerTracker.userTrackingSymbols, function (b, d) { a.push("<tr data-tracker-index='" + b + "'><td>" + d.symbol_name + "</td><td>" + d.symbol_description + "</td><td><div class='input-prepend'><span class='add-on btn primary toggleVal unselectable' data-alt-value='" + ("$" == d.ownership_type ? "%" : "$") + "' style='z-index:0;'>"); a.push("$" == d.ownership_type ? "$" : "%"); a.push("</span><input type='text' class='span2 stockValue' value='" + (d.ownership_value || "") + "'></div></td><td><button class='btn error removeStock'>X</button></td></tr>") }); a.push("<tr><td colspan='2' style='text-align:right;'>Total Value </td><td colspan='2'><div class='input-prepend'>"); if (null == TickerTracker.currentPortfolioType || "$" == TickerTracker.currentPortfolioType) a.push("<span style='z-index:0;' data-alt-value='$' class='add-on btn primary unselectable disabled'>$</span><input id='totalAmountInput' type='text' value='0.00' class='span2' disabled='disabled'></div></td></tr>"); else { var b = 0, b = isNaN(TickerTracker.currentPercentageOwnershipValue) ? "0.00" : TickerTracker.currentPercentageOwnershipValue.toFixed(2); a.push("<span style='z-index:0;' data-alt-value='%' class='add-on btn primary unselectable'>$</span><input id='totalAmountInput' type='text' value='" + b + "' class='span2'></div></td></tr>") } a.push("</tbody></table>"); $("#tickerTrackerTableDiv").html(a.join("")); "$" == TickerTracker.currentPortfolioType && TickerTracker.updateTotalValue() }, computeFinalPercentageValues: function () { var a = jQuery.extend(!0, [], TickerTracker.userTrackingSymbols), b = 0; TickerTracker.noTotalValue = !1; 0 == TickerTracker.currentPercentageOwnershipValue || isNaN(TickerTracker.totalValue) ? (b = 1, TickerTracker.noTotalValue = !0) : (isNaN(TickerTracker.currentPercentageOwnershipValue), b = 1); $.each(a, function (c, d) { a[c].ownership_value = TickerTracker.noTotalValue ? d.ownership_value : d.ownership_value * b }); return a }, showTotalEmphasis: function () { setTimeout(function () { $("#totalAmountInput, .toggleVal").addClass("showEmphasis") }, 1); setTimeout(function () { $("#totalAmountInput, .toggleVal").removeClass("showEmphasis") }, 400) } }; Autocomplete = { SearchSource: "methods.php?a=complexstocksearch", Parameters: { x: 0, y: 0, width: 0, height: 0, targetTextBox: null }, init: function (a) { Autocomplete.Parameters.targetTextBox = a; Autocomplete.generateSuggestionBox(); Autocomplete.positionSuggestionBox(); Autocomplete.monitorChanges() }, generateSuggestionBox: function () { $("body").append("<div id='autocomplete' style='position:absolute;display:none; overflow:none;' class='alert-message info'></div>") }, positionSuggestionBox: function () { var a = $(Autocomplete.Parameters.targetTextBox).offset(), b = a.left, a = a.top; $(Autocomplete.Parameters.targetTextBox).width(); var c = $(Autocomplete.Parameters.targetTextBox).height(); $("#autocomplete").css({ left: b, top: a + c + 10, width: 500 }) }, monitorChanges: function () { $(Autocomplete.Parameters.targetTextBox).on("keyup change", function (a) { if (13 == a.keyCode) return a = $("#searchTextBox").val(), TickerTracker.addManualSymbol(a), $("#searchTextBox").val(""), !1; a = $(this).val(); 2 < a.length ? (Autocomplete.search(a), Autocomplete.showSuggestions()) : Autocomplete.hideSuggestions() }); $(Autocomplete.Parameters.targetTextBox).on("blur", function () { Autocomplete.hideSuggestions() }); $(Autocomplete.Parameters.targetTextBox).on("focus", function () { var a = $(this).val(); "Enter Symbol" != a && 2 < a.length && Autocomplete.showSuggestions() }); $(window).on("resize", function () { Autocomplete.positionSuggestionBox() }); $("#autocomplete").on("click", "div", function () { var a = $(this).closest("div"), a = $(a).attr("data-symbol-id") - 0; TickerTracker.addSymbol(a); setTimeout(function () { Autocomplete.hideSuggestions() }, 1) }) }, search: function (a) { $.ajax({ type: "GET", dataType: "JSON", url: Autocomplete.SearchSource, data: { s: a }, success: function (a) { Autocomplete.generateSuggestionBoxContents(a.response.data) } }) }, generateSuggestionBoxContents: function (a) { if (0 == a.length) return Autocomplete.hideSuggestions(), !1; var b = ["<div style='margin-bottom:0;'>"]; $.each(a, function (a, d) { SymbolCache.addSymbolToCache(d.symbol_id, d.symbol_name, d.symbol_description); b.push("<div class='autocompleteSuggestion' data-symbol-id='" + d.symbol_id + "'><span style='padding-left:10px;width:50px;display:block;float:left;clear:none;'>" + d.symbol_name + "</span><span style='width:370px;display:block;clear:none;float:left;'>" + d.symbol_description + "</span><span>" + d.exchange_name + "</span></div>") }); b.push("</div>"); $("#autocomplete").html(b.join("")) }, hideSuggestions: function () { $("#autocomplete").fadeOut(100, function () { }) }, showSuggestions: function () { $("#autocomplete").fadeIn(100) }, clickSelection: function () { } }; Database = { insertNewStocks: function () { if (!1 == Database.cleanData()) return !1; TickerTracker.drawTable(); Database.commitAjaxInsertNewStocks() }, confirmTypeInconsistency: function () { $("#portfolioInconsistent").modal("show") }, commitAjaxInsertNewStocks: function () { var a = "$" == TickerTracker.currentPortfolioType ? TickerTracker.userTrackingSymbols : TickerTracker.computeFinalPercentageValues(), b = "%" == TickerTracker.currentPortfolioType ? TickerTracker.currentPercentageOwnershipValue : TickerTracker.totalValue, a = { symbols: a, emailFrequency: $("input[type=radio]:checked").val(), emailAddress: $("#user_email").val(), noTotalVal: TickerTracker.noTotalValue, totalVal: b }, a = JSON.stringify(a); $.ajax({ type: "post", dataType: "json", url: "methods.php?a=insertNewStocks", data: { d: a }, success: function () { $("#showSaved").modal("show") } }) }, resetPortfolio: function () { $.ajax({ type: "post", dataType: "json", url: "/methods.php?a=resetportfolio", success: function () { window.location = "/" } }) }, cleanData: function () { var a = !1, b = null, c = null, d = 0, g = 0, h = 0; $.each(TickerTracker.userTrackingSymbols, function (i, e) { if (a) return !1; h++; e.ownership_value += ""; null == b && (b = e.ownership_type); c = e.ownership_type; if (b != c) return alert("Your portfolio currently utilizes both percentages and absolute values.\r\nPlease update your portfolio to use only one type."), a = !0, !1; "%" == c ? d += parseFloat(e.ownership_value) : g += parseFloat(e.ownership_value); if (null == e.ownership_value || "" == e.ownership_value || 1 > e.ownership_value.replace(/[,]/gi, "").match(/[0-9]{1,99}/gi).length) return a = !0, alert("Invalid ownership value detected for " + e.symbol_description), !1; if (0 >= parseInt(e.ownership_value, 10)) return alert("Your ownership value for " + e.symbol_description + " is at or below 0. Only positive values are allowed."), a = !0, !1; var f = parseFloat(e.ownership_value.replace(/,/gi, "")) + ""; if (1 < (f.match(/[.]/gi) || []).length) return alert("Your ownership value for " + e.symbol_description + " has too many periods."), a = !0, !1; null == f.match(/[.]/gi) && (f += ".00"); TickerTracker.userTrackingSymbols[i].ownership_value = f }); if (0 == h) return alert("Your portfolio contains no stocks, please update your portfolio to contain at least one stock."), a = !0, !1; if ("%" == b && 100.5 < d) { if (!a) return alert("The sum of your portfolio percentages is greater than 100.\r\nPlease update your portfolio with the appropriate values to proceed."), !1; a = !0 } if ("%" == b && 99.5 > d) { if (!a) return alert("The sum of your portfolio percentages is less than 100.\r\nPlease update your portfolio with the appropriate values to proceed."), !1; a = !0 } if ("$" == b && 0 == g) { if (!a) return alert("Your portfolio ownership value must be greater than $0 to save.\r\nPlease update your portfolio with your ownership to continue."), !1; a = !0 } return b != TickerTracker.lastPortfolioType && null != TickerTracker.lastPortfolioType && !0 != TickerTracker.allowInconsistency ? (Database.confirmTypeInconsistency(), !1) : !0 === a ? !1 : !0 } }; Array.prototype.remove = function (a, b) { var c = this.slice((b || a) + 1 || this.length); this.length = 0 > a ? this.length + a : a; return this.push.apply(this, c) }; String.prototype.trim = function () { return this.replace(/^\s*/, "").replace(/\s*$/, "") };